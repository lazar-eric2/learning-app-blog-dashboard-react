/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { CacheFirst, NetworkFirst } from 'workbox-strategies';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';
import { googleFontsCache, staticResourceCache, pageCache } from 'workbox-recipes';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({ request, url }) => {
        // If this isn't a navigation, skip.
        if (request.mode !== 'navigate') {
            return false;
        } // If this is a URL that starts with /_, skip.

        if (url.pathname.startsWith('/_')) {
            return false;
        } // If this looks like a URL for a resource, because it contains // a file extension, skip.

        if (url.pathname.match(fileExtensionRegexp)) {
            return false;
        } // Return true to signal that we want to use the handler.

        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
});

// Recipes

googleFontsCache();

pageCache({
    plugins: [
        new CacheableResponsePlugin({
            statuses: [0, 200],
        }),
    ],
});

staticResourceCache({
    plugins: [
        new CacheableResponsePlugin({
            statuses: [0, 200],
        }),
    ],
});

// * * * CUSTOM * * *

// * * OFFLINE MODE * *

const MAX_AGE_SECONDS = 12 * 30 * 24 * 60 * 60;

// Plugins

const IgnoreQueryStringPlugin = {
    cachedResponseWillBeUsed: async ({ cacheName, request, matchOptions, cachedResponse, event }) => {
        if (cachedResponse) return cachedResponse;

        // This will match same URL / different query string, where the original failed
        return caches.match(request.url, { ignoreSearch: true });
    },
};

// Images (Other)

registerRoute(
    new RegExp('.(?:png|gif|jpg|jpeg|webp|svg)$'),
    new CacheFirst({
        cacheName: 'image',
        plugins: [
            new CacheableResponsePlugin({
                statuses: [0, 200]
            }),
            new ExpirationPlugin({
                maxEntries: 1e4,
                maxAgeSeconds: MAX_AGE_SECONDS,
            }),
            IgnoreQueryStringPlugin,
        ],
    })
);
